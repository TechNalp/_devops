services:
  nginx:
    build: ./nginx
    networks:
      - front-tier
    ports:
      - "8000:8000"
    depends_on:
      vote_1:
        condition: service_started
      vote_2:
        condition: service_started

  db:
    image: postgres:15-alpine
    volumes:
      - ./healthchecks/postgres.sh:/healthchecks/postgres.sh
      - db-data:/var/lib/postgresql/data
    networks:
      - back-tier
    healthcheck:
      test: ["CMD", "/healthchecks/postgres.sh"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 15s
    environment:
      - POSTGRES_PASSWORD=postgres

  redis:
    image: redis
    volumes:
      - ./healthchecks/redis.sh:/healthchecks/redis.sh
    networks:
      - back-tier
    healthcheck:
      test: ["CMD", "/healthchecks/redis.sh"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 15s

  seeder:
    build: ./seed-data
    networks:
      - front-tier
    depends_on:
      - nginx

  vote_1:
    build: ./vote
    networks:
      - front-tier
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy

  vote_2:
    build: ./vote
    networks:
      - front-tier
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy

  result:
    build: ./result
    ports:
      - "4000:4000"
    networks:
      - front-tier
      - back-tier
    depends_on:
      db:
        condition: service_healthy

  worker:
    build: ./worker
    networks:
      - back-tier
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
networks:
  front-tier:
  back-tier:

volumes:
  db-data:
